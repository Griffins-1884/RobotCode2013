// This file was generated by RobotBuilder v0.0.2.
package org.usfirst.frc1884.RobotCode2013.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1884.RobotCode2013.commands.SetShooterAngle;
import org.usfirst.frc1884.RobotCode2013.Robot;


/**
 * This is the default autonomous command
 */
public class AutonomousCommandNoVision extends Command {

    public AutonomousCommandNoVision() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (machineState != 5) {
            shootAtBeginAutonomous();
        } else if (machineState == 5) {
            if (!lineFound()) {
                initalizeFeederAndShooter();
                Robot.chassis.driveMecanumNormalized(-0.5, 0, 0);
            } else {
                driveOnLine();
                shootOnce();
            }
        }
    }

    protected void initalizeFeederAndShooter() {
        Robot.feeder.setFeederIntakeSpeed(1);
        Robot.feeder.extendArm();
        SetShooterAngle setShooterAngleCommand = new SetShooterAngle(Math.toRadians(25));
    }

    protected void shootOnce() {
        double secondWheel = 1;
        double firstWheel = SpinWheels.FIRST_WHEEL_RATIO * 1;
        Robot.shooter.setShootingMotors(firstWheel, secondWheel);
        if (waitForPistonRetract()) {
            Robot.storageBox.extendFiringPiston();
        } else if (waitForPistonExtend()) {
            Robot.storageBox.retractFiringPiston();
        }
    }
    boolean lastFoundFront = false;

    protected void driveOnLine() {
        if (Robot.chassis.getFrontLightSensor() && Robot.chassis.getBackLightSensor()) {
            Robot.chassis.driveMecanumNormalized(0, 0.5, 0);
        } else if (Robot.chassis.getFrontLightSensor()) {
            lastFoundFront = true;
            Robot.chassis.driveMecanumNormalized(0.5, 0, 0.1);
        } else if (Robot.chassis.getBackLightSensor()) {
            lastFoundFront = false;
            Robot.chassis.driveMecanumNormalized(0.5, 0, -0.1);
        } else {
            if (lastFoundFront) {
                Robot.chassis.driveMecanumNormalized(0.5, 0, 0.1);
            } else {
                Robot.chassis.driveMecanumNormalized(0.5, 0, -0.1);
            }
        }
    }
    protected boolean lineHasBeenFound = false;

    protected boolean lineFound() {
        if (Robot.chassis.getBackLightSensor() || lineHasBeenFound) {
            lineHasBeenFound = true;
            return true;
        }
        return false;
    }
    int machineState = 0;//0 is first shot, 1 is second shot, 2 is third shot, 3 is last shoot and 4 is done, 5 is wheels turned off.

    protected void shootAtBeginAutonomous() {
        double secondWheel = 1;
        double firstWheel = SpinWheels.FIRST_WHEEL_RATIO * 1;
        Robot.shooter.setShootingMotors(firstWheel, secondWheel);
        if (machineState == 4) {
            Robot.shooter.setShootingMotors(0, 0);
            machineState++;
        } else if (machineState == 0 || machineState == 1 || machineState == 2) {
            if (waitForPistonRetract()) {
                Robot.storageBox.extendFiringPiston();
            } else if (waitForPistonExtend()) {
                Robot.storageBox.retractFiringPiston();
                machineState++;
            }
        }
    }
    double origTimeRetract = System.currentTimeMillis();

    protected boolean waitForPistonRetract() {
        if (System.currentTimeMillis() - origTimeRetract > 300) {
            origTimeRetract = System.currentTimeMillis();
            return true;
        }
        return false;
    }
    double origTimeExtend = System.currentTimeMillis();

    protected boolean waitForPistonExtend() {
        if (System.currentTimeMillis() - origTimeExtend > 300) {
            origTimeExtend = System.currentTimeMillis();
            return true;
        }
        return false;
    }
    
    double lineTrackTime;

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (lineHasBeenFound) {
            lineTrackTime = System.currentTimeMillis();
        }
        if(System.currentTimeMillis()-lineTrackTime > 4000){
            return true;
        }
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.feeder.retractArm();
        Robot.feeder.setFeederIntakeSpeed(0);
        Robot.chassis.driveMecanumNormalized(0, 0, 0);
        Robot.shooter.setShootingMotors(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}