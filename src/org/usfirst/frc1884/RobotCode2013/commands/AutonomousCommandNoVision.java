// This file was generated by RobotBuilder v0.0.2.
package org.usfirst.frc1884.RobotCode2013.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1884.RobotCode2013.Robot;
/**
 * This is the default autonomous command
 */
public class  AutonomousCommandNoVision extends Command {
    public AutonomousCommandNoVision() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        shootAutonomous(1);
        if(!driveBackwardsUntilLine()) {} else {
            driveOnLine();
        }
    }
    
    boolean lastFoundFront = false;
    
    protected void driveOnLine() {
        if (Robot.chassis.getFrontLightSensor()&&Robot.chassis.getBackLightSensor()) {
            Robot.chassis.driveMecanumNormalized(0, 0.5, 0);
        } else if (Robot.chassis.getFrontLightSensor()) {
            lastFoundFront = true;
            Robot.chassis.driveMecanumNormalized(0.5, 0, 0.1);
        } else if (Robot.chassis.getBackLightSensor()) {
            lastFoundFront = false;
            Robot.chassis.driveMecanumNormalized(0.5, 0, -0.1);
        } else {
            if (lastFoundFront) {
                Robot.chassis.driveMecanumNormalized(0.5, 0, 0.1);
            } else {
                Robot.chassis.driveMecanumNormalized(0.5, 0, -0.1);
            }
        }
    }
    
    protected boolean lineFound = false;
    
    protected boolean driveBackwardsUntilLine() {
        if(Robot.chassis.getBackLightSensor()||lineFound) {
            lineFound = true;
            return true;
        }
        return false;
    }
    
    protected void shootAutonomous(double secondWheel1) {
        double secondWheel = secondWheel1;
        double firstWheel = SpinWheels.FIRST_WHEEL_RATIO*secondWheel;
        Robot.shooter.setShootingMotors(firstWheel, secondWheel);
        //Add optiom time wait here for motors to speed up
        Robot.storageBox.extendFiringPiston();
        Robot.storageBox.retractFiringPiston();
        //Add optiom time wait here for motors to speed up
        Robot.storageBox.extendFiringPiston();
        Robot.storageBox.retractFiringPiston();
        //Add optiom time wait here for motors to speed up
        Robot.storageBox.extendFiringPiston();
        Robot.storageBox.retractFiringPiston();
        Robot.shooter.setShootingMotors(0, 0);
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    
    // Called once after isFinished returns true
    protected void end() {
    }
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
