// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1884.RobotCode2013.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1884.RobotCode2013.Robot;
/**
 *
 */
public class  SetShooterAngle extends Command {
    double targetWinchLength;
    
    public SetShooterAngle(double shooterAngle) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        this.setAngle(shooterAngle);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shootingPitchControl);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.shootingPitchControl.pidController.enable();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.shootingPitchControl.pidController.setSetpoint(targetWinchLength);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Robot.shootingPitchControl.pidController.onTarget();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.shootingPitchControl.pidController.disable();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.shootingPitchControl.pidController.disable();
    }
    
    public void setAngle(double shooterAngle) {
	targetWinchLength = Robot.shootingPitchControl.calculateWinchLengthForShooterAngle(shooterAngle);
    }
}
